type Transform = Mat4 * Mat4 * Mat4 * Mat4 * Mat4; # Translation * Rx * Ry * Rz * Scale
# Collider = name * parameter * transform
# default: sphere: center at 0,0,0
# default: plane: center at 0,0,0, normal at 1,0,0, up at 0,1,0
type Collider = String * Float2 * Transform; # TODO: how to define isCollision function here
type Shader = String;
type RenderObject = Mesh * Texture * Shader;
type Light = Vec3 * Vec3 * Float; # Color * Position * Intensity
type Trigger = String * ( -> Bool) * ( -> Void); # name * condition * action
# Object = name * position * local_transform * render_obj * * collider * light array * triggers
type Object = String * Vec3 * Transform * RenderObject * Collider * (Light Array) * (Trigger Array);
type Inventory = String;
# Player = Room * Collider * Inventory Array * Height * RenderObject * Transform
type Player = String * Collider * (Inventory Array) * Float * RenderObject * Transform;
# Room = Name * Lights * Objects * size * texture * start_position * start_direction
type Room = String * (Light Array) * (Object Array) * Vec3 * Texture * Vec2 * Vec3;
# Game = starting_room * (Room Array * Player)
type Game = String * (Room Array) * Player;

var __translate = mat4();
var __rotateX = mat4();
var __rotateY = mat4();
var __rotateZ = mat4();
var __scale = mat4();
mat4.translate(__translate, __translate, vec3(0.0, 0.0, 0.0));
mat4.rotateX(__rotateX, __rotateX, 0.0);
mat4.rotateY(__rotateY, __rotateY, 0.0);
mat4.rotateZ(__rotateZ, __rotateZ, 0.0);
mat4.scale(__scale, __scale, vec3(1.0, 1.0, 1.0));

var __identity = (
    __translate,
    __rotateX,
    __rotateY,
    __rotateZ,
    __scale
);

var __wood = load_texture("wood1.png");

var __game = (
    "room1",
    # Room
    array(
        (
            "room1",
            # Lights
            array(
                (vec3(1.0, 1.0, 1.0), vec3(0.0, 6.0, 0.0), 5.0)
            ),
            # Objects
            array(
                (
                    # Name
                    "teapot",
                    # Position
                    vec3(0.0, 2.5, 10.0),
                    # Local Transform,
                    __identity,
                    # Render Object,
                    (teapot, __wood, "phong"),
                    # Collider
                    ("sphere", vec2(0.5, 0.5), __identity),
                    # Light
                    array{Light}(),
                    # Triggers
                    array{Trigger}()
                )
            ),
            # Size
            vec3(20.0, 6.0, 20.0),
            # Room Texture
            __wood,
            # Start Position,
            vec2(0.0, 0.0),
            # Start Direction
            vec3(0.0, 0.0, 1.0)
        )
    ),
    # Player
    (
        "room1",
        # Collider
        ("sphere", vec2(3.0, 3.0), __identity),
        # Inventory
        array{Inventory}(),
        # Height
        2.5,
        # RenderObject
        (teapot, __wood, "phong"),
        # Transform
        __identity
    )
);

var get_game = fun -> (
    __game
);

var get_current_room = fun -> (
    (__game).0
);

var get_rooms = fun -> (
    (__game).1
);

var get_room = fun name: String -> (
    var rooms = get_rooms();
    var i = 0;
    var room_picked = -1;
    while (i <= (length(rooms) - 1)) (
        var cur_room = get(rooms, i);
        if (equal((cur_room).0, name)) (
            room_picked = i;
            i = i + length(rooms);
        ) (i;);
        i = i + 1;
    );
    if (room_picked == (-1)) (
        1/0;
    ) (0;);
    get(rooms, room_picked)
);

var get_room_lights = fun room: Room -> (
    (room).1;
);

var get_room_light = fun room: Room index: Int -> (
    var lights = (room).1;
    get(lights, index);
);

var get_light_color = fun light: Light -> (
    (light).0;
);

var get_light_position = fun light: Light -> (
    (light).1;
);

var get_light_intensity = fun light: Light -> (
    (light).2;
);

var get_room_objects = fun room: Room -> (
    (room).2;
);

var get_room_object = fun room: Room name: String -> (
    var objects = get_room_objects(room);
    var i = 0;
    var object_picked = -1;
    while (i <= (length(objects) - 1)) (
        var cur_object = get(objects, i);
        if (equal((cur_object).0, name)) (
            object_picked = i;
            i = i + length(objects);
        ) (i;);
        i = i + 1;
    );
    if (object_picked == (-1)) (
        1/0;
    ) (0;);
    get(objects, object_picked);
);

var get_object_position = fun object: Object -> (
    (object).1;
);

var get_object_transform = fun object: Object -> (
    (object).2;
);

var get_object_renderObject = fun object: Object -> (
    (object).3;
);

var get_object_collider = fun object: Object -> (
    (object).4;
);

var get_object_lights = fun object: Object -> (
    (object).5;
);

var get_object_light = fun object: Object index: Int -> (
    get((object).5, index);
);

var get_object_triggers = fun object: Object -> (
    (object).6;
);

var get_transform_translation = fun transform: Transform -> (
    (transform).0;
);

var get_transform_rotationX = fun transform: Transform -> (
    (transform).1;
);

var get_transform_rotationY = fun transform: Transform -> (
    (transform).2;
);

var get_transform_rotationZ = fun transform: Transform -> (
    (transform).3;
);

var get_transform_scale = fun transform: Transform -> (
    (transform).4;
);

var get_collider_name = fun collider: Collider -> (
    (collider).0;
);

var get_collider_dimension = fun collider: Collider -> (
    (collider).1;
);

var get_collider_transform = fun collider: Collider -> (
    (collider).2;
);

var get_render_object_mesh = fun render_obj: RenderObject -> (
    (render_obj).0;
);

var get_render_object_texture = fun render_obj: RenderObject -> (
    (render_obj).1;
);

var get_render_object_shader = fun render_obj: RenderObject -> (
    (render_obj).2;
);

var get_trigger_name = fun trigger: Trigger -> (
    (trigger).0;
);

var get_trigger_condition = fun trigger: Trigger -> (
    (trigger).1;
);

var get_trigger_action = fun trigger: Trigger -> (
    (trigger).2;
);

var get_player = fun game: Game -> (
    (game).2;
);

var get_player_name = fun player : Player -> (
    (player).0;
);

var get_player_collider = fun player : Player -> (
    (player).1;
);

var get_player_inventory = fun player : Player -> (
    (player).2;
);

var get_player_item = fun player : Player index: Int -> (
    var inventory = (player).2;
    get(inventory, index);
);

var get_player_height = fun player : Player -> (
    (player).3;
);

var get_player_render_object = fun player : Player -> (
    (player).4;
);

var get_player_transform = fun player : Player -> (
    (player).5;
);

var get_room_name = fun room : Room -> (
    (room).0;
);

var get_room_size = fun room : Room -> (
    (room).3;
);

var get_room_texture = fun room : Room -> (
    (room).4;
);

var get_room_start_position = fun room : Room -> (
    (room).5;
);

var get_room_start_direction = fun room : Room -> (
    (room).6;
);

####################################################

var set_game = fun game: Game -> (
    __game = game;
);

var set_current_room = fun name: String -> (
    __game = name, get_rooms(), get_player(__game);
);

var set_rooms = fun rooms: (Room Array) -> (
    __game = get_current_room(), rooms, get_player(__game);
);

var set_room = fun name: String room: Room -> (
    var rooms = get_rooms();
    var i = 0;
    var room_picked = i;
    while (i <= (length(rooms) - 1)) (
        var cur_room = get(rooms, i);
        if (equal((cur_room).0, name)) (
            room_picked = i;
            i = i + length(rooms);
        ) (i);
        i = i + 1;
    );
    set(rooms, room_picked, room); # TODO: will set first elem if no such room name exists
);

var set_room_light = fun room: Room index: Int light: Light -> (
    var lights = (room).1;
    set(lights, index, light);
);

var set_light_color = fun light: Light color: Vec3 -> (
    var new_light = color, get_light_position(light), get_light_intensity(light);
    new_light;
);

var set_light_position = fun light: Light position: Vec3 -> (
    var new_light = get_light_color(light), position, get_light_intensity(light);
    new_light;
);

var set_light_intensity = fun light: Light intensity: Float -> (
    var new_light = get_light_color(light), get_light_position(light), intensity;
    new_light;
);

var set_room_objects = fun room: Room objects: (Object Array) -> (
    var new_room = get_room_name(room), ((room).1), objects, ((room).3);
);

var set_room_object = fun room: Room name: String object: Object -> (
    var objects = get_room_objects(room);
    var i = 0;
    var object_picked = -1;
    while (i <= (length(objects) - 1)) (
        var cur_object = get(objects, i);
        if (equal((cur_object).0, name)) (
            object_picked = i;
            i = i + length(objects);
        ) (i);
        i = i + 1;
    );
    if (i >= 0) (
        set(objects, object_picked, object);
        objects;
    )(
        objects;
    );
    room;
);

var set_object_position = fun object: Object position: Vec3 -> (
    var new_object = ((object).0), position, ((object).2), ((object).3),
    ((object).4), ((object).5), ((object).6);
    new_object;
);

var set_object_transform = fun object: Object transform: Transform -> (
    var new_object = ((object).0), get_object_position(object), transform,
    ((object).3), ((object).4), ((object).5), ((object).6);
    new_object;
);

var set_object_renderObject = fun object: Object render_obj: RenderObject -> (
    var new_object = ((object).0), get_object_position(object), get_object_transform(object),
      render_obj, ((object).4), ((object).5), ((object).6);
    new_object;
);

var set_object_collider = fun object:Object collider:Collider -> (
    var new_object = ((object).0), get_object_position(object), get_object_transform(object),
      get_object_renderObject(object), collider, ((object).5), ((object).6);
    new_object;
);

var set_object_light = fun object:Object light:Light -> (
    var new_object = ((object).0), get_object_position(object), get_object_transform(object),
      get_object_renderObject(object), get_object_collider(object), light, ((object).6);
    new_object;
);

var set_object_triggers = fun object:Object triggers: (Trigger Array) -> (
    var new_object = ((object).0), get_object_position(object), get_object_transform(object),
      get_object_renderObject(object), get_object_collider(object), get_object_lights(object), triggers;
    new_object;
);

var set_transform_translation = fun transform:Transform translation:Mat4 -> (
    var new_transform = translation, ((transform).1), ((transform).2), ((transform).3), ((transform).4);
    new_transform;
);

var set_transform_rotationX = fun transform:Transform rx:Mat4 -> (
    var new_transform = get_transform_translation(transform), rx, ((transform).2), ((transform).3), ((transform).4);
    new_transform;
);

var set_transform_rotationY = fun transform:Transform ry:Mat4 -> (
    var new_transform = ((transform).0), ((transform).1), ry, ((transform).3), ((transform).4);
    new_transform;
);

var set_transform_rotationZ = fun transform:Transform rz:Mat4 -> (
    var new_transform = ((transform).0), ((transform).1), ((transform).2), rz, ((transform).4);
    new_transform;
);

var set_transform_scale = fun transform:Transform scale:Mat4 -> (
    var new_transform = ((transform).0), ((transform).1), ((transform).2), ((transform).3), scale;
    new_transform;
);

var set_collider_name = fun collider: Collider name: String -> (
    var new_collider = name, ((collider).1), ((collider).2);
    new_collider;
);

var set_collider_dimension = fun collider: Collider dimension: Float2 -> (
    var new_collider = ((collider).0), dimension, ((collider).2);
    new_collider;
);

var set_collider_transform = fun collider: Collider transform: Transform -> (
    var new_collider = ((collider).0), ((collider).1), transform;
    new_collider;
);

var set_render_object_mesh = fun render_obj: RenderObject mesh: Mesh -> (
    mesh, ((render_obj).1), ((render_obj).2);
);

var set_render_object_texture = fun render_obj: RenderObject texture: Texture -> (
    ((render_obj).0), texture, ((render_obj).2);
);

var set_render_object_shader = fun render_obj: RenderObject shader: Shader -> (
    ((render_obj).0), ((render_obj).1), shader;
);

var set_trigger_name = fun trigger:Trigger name: String -> (
    name, ((trigger).1), ((trigger).2);
);

var set_trigger_condition = fun trigger: Trigger condition: (-> Bool) -> (
    ((trigger).0), condition, ((trigger).2);
);

var set_trigger_action = fun trigger:Trigger action: (-> Void) -> (
    ((trigger).0), ((trigger).1), action;
);

var set_player = fun game: Game player: Player -> (
    __game = ((game).0), ((game).1), player;
);

var set_player_name = fun player : Player name: String -> (
    var new_player = name, ((player).1), ((player).2), ((player).3), ((player).4), ((player).5);
    set_player(get_game(), new_player);
);

var set_player_collider = fun player : Player collider: Collider -> (
    var new_player = ((player).0), collider, ((player).2), ((player).3), ((player).4), ((player).5);
    set_player(get_game(), new_player);
);

var set_player_inventory = fun player:Player inv:(Inventory Array) -> (
    var new_player = ((player).0), ((player).1), inv, ((player).3), ((player).4), ((player).5);
    set_player(get_game(), new_player);
);

var set_player_item = fun player : Player index: Int inv_item : Inventory -> (
    var inventory = ((player).2);
    set(inventory, index, inv_item);
);

var set_player_height = fun player:Player height: Float -> (
    var new_player = ((player).0), ((player).1), ((player).2), height, ((player).4), ((player).5);
    set_player(get_game(), new_player);
);

var set_player_render_object = fun player : Player render_obj: RenderObject -> (
    var new_player = ((player).0), ((player).1), ((player).2), ((player).3), render_obj, ((player).5);
    set_player(get_game(), new_player);
);

var set_player_transform = fun player: Player transform: Transform -> (
    var new_player = ((player).0), ((player).1), ((player).2), ((player).3), ((player).4), transform;
    set_player(get_game(), new_player);
);
# Room = Name * Lights * Objects * size * texture * start_position * start_direction
var set_room_name = fun room : Room name: String -> (
    name, ((room).1), ((room).2), ((room).3), ((room).4), ((room).5), ((room).6);
);

var set_room_size = fun room : Room size: Vec3 -> (
    ((room).0), ((room).1), ((room).2), size ,((room).4), ((room).5), ((room).6);
);

var set_room_texture = fun room : Room texture: Texture -> (
    ((room).0), ((room).1), ((room).2), ((room).3), texture, ((room).5), ((room).6);
);

var set_room_start_position = fun room : Room start_pos: Vec2 -> (
    ((room).0), ((room).1), ((room).2), ((room).3), ((room).4), start_pos, ((room).6);
);

var set_room_start_direction = fun room : Room start_dir: Vec3 -> (
    ((room).0), ((room).1), ((room).2), ((room).3), ((room).4), ((room).5), start_dir;
);
