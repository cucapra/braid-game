type Transform = Mat4 * Mat4 * Mat4 * Mat4 * Mat4 # Translation * Rx * Ry * Rx * Scale
type Collider = String * Float2 * Transform # TODO: how to define isCollision function here
type Shader = String
type RenderObject = Mesh * Texture * Shader
type Light = Vec3 * (Vec3 * Float) # Color * Position * Intensity
type Trigger = String * ( -> Bool) * ( -> Void) # name * condition * action
# Object = name * position * local_transform * render_obj * * collider * light * triggers
type Object = String * Vec3 * Transform * RenderObject * Collider * Light * (Trigger Array)
type Inventory = String
type Player = Int * Collider * (Inventory Array) * Float * RenderObject * Transform
# Room = Name * Lights * Objects * size * texture * start_position * start_direction
type Room = String * ((Light Array) * ((Object Array) * (Vec3 * (Texture * (Vec2 * Vec3)))))
# Game = starting_room * (Room Array * Player)
type Game = String * ((Room Array) * Player)

var __game: Game = (1, )

var get_starting_room = fun -> (
    (__game).0
);

var get_rooms = fun -> (
    ((__game).1).0
)

var get_room = fun (name: String) -> (
    var rooms = get_rooms();
    var i = 0;
    var room_picked = get(rooms, i);
    while (i < length(rooms)) (
        var cur_room = get(rooms, i);
        if ((cur_room).0 == name) (
            room_picked = cur_room;
            i = i + length(rooms);
        ) (i);
        i = i + 1;
    );
    room_picked; # TODO: Does not have null or option
)

var get_light = fun (room: Room, index: Int) -> (
    var lights = ((room).1).0;
    get(lights, i);
);

var get_light_color = fun (light: Light) -> (
    (light).0;
);

var get_light_position = fun (light: Light) -> (
    ((light).1).0;
);

var get_light_intensity = fun (light: Light) -> (
    ((light).1).1;
);

var get_objects = fun (room: Room) -> (
    (((room).1).1).0;
);

var get_object = fun (room: Room, name: String) -> (
    var objects = get_objects();
    var i = 0;
    var object_picked = get(objects, i);
    while (i < length(objects)) (
        var cur_object = get(objects, i);
        if ((cur_object).0 == name) (
            object_picked = cur_object;
            i = i + length(objects);
        ) (i);
        i = i + 1;
    );
    object_picked;
);



var get_object_position = fun (object: Object) -> (
    ((object).1).0;
);

var get_object_transform = fun (object: Object) -> (
    (((object).1).1).0;
);

var get_object_renderObject = fun (object: Object) -> (
    ((((object).1).1).1).0;
);

var get_object_collider = fun (object: Object) -> (
    (((((object).1).1).1).1).0;
);

var get_object_light = fun (object: Object) -> (
    ((((((object).1).1).1).1).1).0;
);

var get_object_triggers = fun (object: Object) -> (
    ((((((object).1).1).1).1).1).1;
);

var get_transform_translation = fun (transform: Transform) -> (
    (transform).0;
);

var get_transform_rotationX = fun (transform: Transform) -> (
    ((transform).1).0;
);

var get_transform_rotationY = fun (transform: Transform) -> (
    (((transform).1).1).0;
);

var get_transform_rotationZ = fun (transform: Transform) -> (
    ((((transform).1).1).1).0;
);

var get_transform_scale = fun (transform: Transform) -> (
    ((((transform).1).1).1).1;
);

# var get_renderObject_